import { ref, set, get, push, runTransaction } from "firebase/database"; // Import necessary Firebase methods
import { database } from "../src/firebase"; // Import your initialized Firebase database instance

/**
 * @typedef {Object} Area
 * @property {string} id - The ID of the area (will be generated by Firebase).
 * @property {string} name - The name of the area.
 * @property {string} shortForm - The short form of the area.
 */

/**
 * Add a new area.
 * @param {Area} area - The area to add.
 * @returns {Promise<string>} The ID of the added area.
 */
const addArea = async (area) => {
  try {
    const areasRef = ref(database, 'areas/'); // Reference to areas in the database

    // Generate a new unique ID using Firebase's push method
    const newAreaRef = push(areasRef); // Create a new child reference with a unique key

    // Run a transaction to handle potential race conditions
    const transactionResult = await runTransaction(areasRef, (currentAreas) => {
      currentAreas = currentAreas || {}; // Initialize if it doesn't exist

      // Check if the area already exists
      if (Object.values(currentAreas).some(existingArea => 
        existingArea.name.toLowerCase() === area.name.toLowerCase() ||
        existingArea.shortForm.toLowerCase() === area.shortForm.toLowerCase())) {
        // If area already exists, abort transaction
        return; 
      }

      // Add the new area to the current areas
      currentAreas[newAreaRef.key] = { ...area, id: newAreaRef.key }; // Add area with new unique ID
      return currentAreas; // Return updated areas
    });

    // If the transaction was successful and a new area was added
    if (transactionResult.committed) {
      await set(newAreaRef, { ...area, id: newAreaRef.key }); // Set area data in Firebase
      return newAreaRef.key; // Return the ID of the added area
    }
    throw new Error("Area already exists.");
  } catch (error) {
    console.error("Failed to add area:", error);
    throw new Error("Failed to add area");
  }
};

/**
 * Retrieve all areas.
 * @returns {Promise<Area[]>} An array of areas.
 */
const getAllAreas = async () => {
  try {
    const areasRef = ref(database, 'areas/'); // Reference to areas in the database
    const snapshot = await get(areasRef); // Retrieve the data
    if (snapshot.exists()) {
      const areas = [];
      snapshot.forEach((childSnapshot) => {
        const area = childSnapshot.val(); // Get the area data
        areas.push({ id: childSnapshot.key, ...area }); // Push the area with its ID
      });
      return areas; // Return the array of areas
    } else {
      console.log("No areas found.");
      return []; // Return an empty array if no areas are found
    }
  } catch (error) {
    console.error("Failed to retrieve areas:", error);
    throw new Error("Failed to retrieve areas");
  }
};


/**
 * Delete an area by a property inside the object.
 * @param {string} id - The ID to match against the property inside the area object.
 * @returns {Promise<void>} Resolves when the area is deleted.
 */
const deleteArea = async (id) => {
  try {
    const areasRef = ref(database, 'areas'); // Reference to all areas in the database
    const snapshot = await get(areasRef); // Retrieve all areas

    if (snapshot.exists()) {
      let areaToDeleteKey = null;

      // Find the key of the area to delete by matching the property with id
      snapshot.forEach((childSnapshot) => {
        const area = childSnapshot.val();
        if (area.shortForm === id) { // Match the inner property `id` with the provided id parameter
          areaToDeleteKey = childSnapshot.key;
        }
      });

      if (areaToDeleteKey) {
        // Delete the specific area entry by its key
        const areaRef = ref(database, `areas/${areaToDeleteKey}`);
        await set(areaRef, null);
        console.log(`Area with ID ${id} has been deleted.`);
      } else {
        console.log(`No area found with ID ${id}.`);
      }
    } else {
      console.log("No areas found.");
    }
  } catch (error) {
    console.error("Failed to delete area:", error);
    throw new Error("Failed to delete area");
  }
};


export { addArea, getAllAreas,deleteArea };
