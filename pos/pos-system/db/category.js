import { database } from "../src/firebase"; // Adjust the path according to your setup
import { ref, set, get, push,remove  } from "firebase/database"; // Import necessary Firebase methods

/**
 * @typedef {Object} SubCategory
 * @property {string} name - The name of the subcategory.
 * @property {string} shortForm - The short form of the subcategory.
 */

/**
 * @typedef {Object} Category
 * @property {string} id - The ID of the category (generated by Firebase).
 * @property {string} name - The name of the category.
 * @property {string} shortForm - The short form of the category.
 * @property {SubCategory[]} subCategories - The subcategories of the category.
 */

/**
 * Add a new category.
 * @param {Category} category - The category to add.
 * @returns {Promise<string>} The ID of the added category.
 */
const addCategory = async (category) => {
  try {
    const categoriesRef = ref(database, 'categories');
    const newCategoryRef = push(categoriesRef);

    await set(newCategoryRef, {
      id: newCategoryRef.key,
      name: category.name,
      shortForm: category.shortForm,
      subCategories: category.subCategories || [],
    });

    return newCategoryRef.key;
  } catch (error) {
    console.error("Failed to add category:", error);
    throw new Error("Failed to add category");
  }
};

/**
 * Retrieve all categories.
 * @returns {Promise<Category[]>} An array of categories.
 */
const getAllCategories = async () => {
  try {
    const categoriesRef = ref(database, 'categories');
    const snapshot = await get(categoriesRef);
    if (snapshot.exists()) {
      const categories = [];
      snapshot.forEach((childSnapshot) => {
        const category = childSnapshot.val();
        categories.push({ id: childSnapshot.key, ...category });
      });
      return categories;
    } else {
      console.log("No categories found.");
      return [];
    }
  } catch (error) {
    console.error("Failed to retrieve categories:", error);
    throw new Error("Failed to retrieve categories");
  }
};

/**
 * Update a category by id.
 * @param {string} id - The ID of the category to update.
 * @param {Category} updatedCategory - The updated category data.
 * @returns {Promise<void>}
 */
const updateCategory = async (id, updatedCategory) => {
  try {
    const categoryRef = ref(database, 'categories/' + id);
    await set(categoryRef, {
      id: id,
      ...updatedCategory,
    });
  } catch (error) {
    console.error("Failed to update category:", error);
    throw new Error("Failed to update category");
  }
};

/**
 * Add a new subcategory to a specific category.
 * @param {string} categoryId - The ID of the category to which the subcategory belongs.
 * @param {SubCategory} subCategory - The subcategory to add.
 * @returns {Promise<void>}
 */
const addSubCategory = async (categoryId, subCategory) => {
  try {
    const categoryRef = ref(database, `categories/${categoryId}/subCategories`);
    const newSubCategoryRef = push(categoryRef);

    await set(newSubCategoryRef, {
      name: subCategory.name,
      shortForm: subCategory.shortForm,
    });
  } catch (error) {
    console.error("Failed to add subcategory:", error);
    throw new Error("Failed to add subcategory");
  }
};

/**
 * Update a subcategory by id within a category.
 * @param {string} categoryId - The ID of the category that contains the subcategory.
 * @param {string} subCategoryId - The ID of the subcategory to update.
 * @param {SubCategory} updatedSubCategory - The updated subcategory data.
 * @returns {Promise<void>}
 */
const updateSubCategory = async (categoryId, subCategoryId, updatedSubCategory) => {
  try {
    const subCategoryRef = ref(database, `categories/${categoryId}/subCategories/${subCategoryId}`);
    await set(subCategoryRef, updatedSubCategory);
  } catch (error) {
    console.error("Failed to update subcategory:", error);
    throw new Error("Failed to update subcategory");
  }
};

/**
 * Retrieve all subcategories for a specific category.
 * @param {string} categoryId - The ID of the category.
 * @returns {Promise<SubCategory[]>} An array of subcategories.
 */
const getAllSubCategories = async () => {
  try {
    const categoriesRef = ref(database, `categories`);
    const snapshot = await get(categoriesRef);
    const allSubCategories = []; // Array to hold all subcategories

    if (snapshot.exists()) {
      // Iterate through all categories
      snapshot.forEach((categorySnapshot) => {
        const categoryId = categorySnapshot.key;
        const subCategoriesRef = ref(database, `categories/${categoryId}/subCategories`);

        // Fetch subcategories for each category
        get(subCategoriesRef).then((subSnapshot) => {
          if (subSnapshot.exists()) {
            subSnapshot.forEach((childSnapshot) => {
              const subCategory = childSnapshot.val();
              allSubCategories.push({ id: childSnapshot.key, ...subCategory, categoryId }); // Include categoryId for reference
            });
          } else {
            console.log(`No subcategories found for category ${categoryId}.`);
          }
        });
      });

      // Return the combined subcategories after all promises are resolved
      return allSubCategories;
    } else {
      console.log("No categories found.");
      return [];
    }
  } catch (error) {
    console.error("Failed to retrieve subcategories:", error);
    throw new Error("Failed to retrieve subcategories");
  }
};


/**
 * Delete a category by name.
 * @param {string} name - The name of the category to delete.
 * @returns {Promise<void>}
 */
const deleteCategoryByName = async (name) => {
  try {
    const categoriesRef = ref(database, 'categories');
    const snapshot = await get(categoriesRef);

    if (snapshot.exists()) {
      let deleted = false;

      snapshot.forEach((childSnapshot) => {
        const category = childSnapshot.val();
        if (category.shortForm === name) {
          const categoryRef = ref(database, `categories/${childSnapshot.key}`);
          remove(categoryRef); // Delete the category with the matching name
          deleted = true;
          console.log(`Deleted category with name: ${name}`);
        }
      });

      if (!deleted) {
        console.log(`No category found with name: ${name}`);
      }
    } else {
      console.log("No categories found.");
    }
  } catch (error) {
    console.error("Failed to delete category:", error);
    throw new Error("Failed to delete category");
  }
};


/**
 * Delete a subcategory by its unique ID within all categories.
 * @param {string} subCategoryId - The unique ID of the subcategory to delete.
 * @returns {Promise<void>}
 */
const deleteSubCategoryById = async (subCategoryId) => {
  try {
    const categoriesRef = ref(database, 'categories');
    const snapshot = await get(categoriesRef);

    if (snapshot.exists()) {
      let subCategoryFound = false;

      // Iterate through each category
      snapshot.forEach((categorySnapshot) => {
        const categoryId = categorySnapshot.key;
        const subCategoriesRef = ref(database, `categories/${categoryId}/subCategories`);

        // Check for the specific subcategory ID within each category's subcategories
        get(subCategoriesRef).then((subSnapshot) => {
          if (subSnapshot.exists()) {
            subSnapshot.forEach((subChildSnapshot) => {
              if (subChildSnapshot.key === subCategoryId) {
                const subCategoryRef = ref(
                  database,
                  `categories/${categoryId}/subCategories/${subCategoryId}`
                );
                remove(subCategoryRef); // Delete the subcategory by ID
                subCategoryFound = true;
                console.log(`Deleted subcategory with ID: "${subCategoryId}" in category ID: "${categoryId}"`);
              }
            });

            // if (!subCategoryFound) {
            //   console.log(`No subcategory found with ID: "${subCategoryId}" in category ID: "${categoryId}".`);
            // }
          } else {
            console.log(`No subcategories found in category ID: "${categoryId}".`);
          }
        });
      });

      if (!subCategoryFound) {
        console.log(`No subcategory found with ID: "${subCategoryId}" in any category.`);
      }
    } else {
      console.log("No categories found.");
    }
  } catch (error) {
    console.error("Failed to delete subcategory:", error);
    throw new Error("Failed to delete subcategory");
  }
};


export { addCategory, getAllCategories, updateCategory, addSubCategory,deleteSubCategoryById, updateSubCategory,deleteCategoryByName, getAllSubCategories };
